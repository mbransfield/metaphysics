import { GraphQLString, GraphQLNonNull } from "graphql"
import {
  mutationWithClientMutationId,
  cursorForObjectInConnection,
} from "graphql-relay"
import { ConversationType, MessageEdge } from "./index"
import { ResolverContext } from "types/graphql"

export default mutationWithClientMutationId<any, any, ResolverContext>({
  name: "SendConversationMessageMutation",
  description: "Appending a message to a conversation thread",
  inputFields: {
    id: {
      type: new GraphQLNonNull(GraphQLString),
      description: "The id of the conversation to be updated",
    },
    from: {
      type: new GraphQLNonNull(GraphQLString),
      description: "The email address of the message sender",
    },
    bodyText: {
      type: new GraphQLNonNull(GraphQLString),
    },
    replyToMessageID: {
      type: new GraphQLNonNull(GraphQLString),
      description: "The message being replied to",
    },
  } /*
  FIXME: Generated by the snake_case to camelCase codemod.
         Either use this to fix inputs and/or remove this comment.
  {
    const {
      bodyText,
      replyToMessageID,
      ..._newFields
    } = newFields;
    const oldFields = {
      bodyText: body_text,
      replyToMessageID: reply_to_message_id,
      ..._newFields
    };
  }
  */,
  outputFields: {
    conversation: {
      type: ConversationType,
      resolve: ({ conversation }) => conversation,
    },
    messageEdge: {
      type: MessageEdge,
      resolve: ({ newMessagePayload }) => {
        return {
          cursor: cursorForObjectInConnection(
            [newMessagePayload],
            newMessagePayload
          ),
          node: newMessagePayload,
        }
      },
    },
  },
  mutateAndGetPayload: (
    { id, from, bodyText: body_text, replyToMessageID: reply_to_message_id },
    { conversationLoader, conversationCreateMessageLoader, userID }
  ) => {
    if (!conversationCreateMessageLoader || !conversationLoader) return null
    return conversationCreateMessageLoader(id, {
      from,
      reply_to_message_id,
      body_text,
      reply_all: true,
      from_id: userID,
    }).then(({ id: newMessageID }) => {
      return conversationLoader(id).then((updatedConversation) => {
        return {
          conversation: updatedConversation,
          // Because Impulse does not have the full new message object available immediately, we return an optimistic
          // response so the mutation can return it too.
          newMessagePayload: {
            id: newMessageID,
            from_email_address: from,
            from_id: userID,
            raw_text: body_text,
            body: body_text,
            created_at: new Date().toISOString(),
            attachments: [],
            // This addition is only for MP so it can determine if the message was from the current user.
            conversation_from_address: updatedConversation.from_email,
          },
        }
      })
    })
  },
})
